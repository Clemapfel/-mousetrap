# internal
ALIASES += internal="(for internal use only)"

# signal_class_name
# param 1: signal name
ALIASES += signal_class_name{1}="has_signal\_\1"

# signal_with_data_f
# param 1: signal name
ALIASES += signal_with_data_f{1}="@brief expected signature of signal handler, forwards user-supplied data to function"

# signal_without_data_f
# param 1: signal name
ALIASES += signal_without_data_f{1}="@brief expected signature of signal handler"

# signal_see_emit_for_parameters
# param 1: signal name
ALIASES += signal_see_emit_for_parameters{1}="@see has_signal\_\1::emit_signal\_\1 for more information on signal handler arguments"

# signal_emit_brief
ALIASES += signal_emit_brief="@brief invoke signal handler manually"

# signal_id
# param 1: linke to gtk docs
ALIASES += signal_id{1}="@brief glib ID \internal^^@see \1"

# signal_connect_data
ALIASES += signal_connect_data="^^@brief connect handler, will be invoked when signal is emitted. Data is passed to the signal handler function^^@param function function or lambda^^@param data arbitrary data"

# signal_connect_no_data
ALIASES += signal_connect_no_data="^^@brief connect handler, will be invoked when signal is emitted^^@param function function or lambda

# signal_set_blocked
ALIASES += signal_set_blocked="^^@brief Set whether signal emission should trigger the signal handler^^@param b true if handler should be blocked, false otherwise"

# signal_get_blocked
ALIASES += signal_get_blocked="^^@brief get whether signal emission should trigger the signal handler^^@return true if handle is blocked, false otherwise"

# signal_disconnect
ALIASES += signal_disconnect="^^@brief disconnect the signal handler"

# signal_ctor
ALIASES += signal_ctor="@brief ctor protected \internal

